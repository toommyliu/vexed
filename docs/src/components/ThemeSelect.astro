<!-- Copyright (c) 2022 Adrián UB https://github.com/adrian-ub -->
<starlight-theme-black-select>
  <button
    aria-label={Astro.locals.t("themeSelect.accessibleLabel")}
    aria-live="polite"
    class="sl-flex button"
    title={Astro.locals.t("themeSelect.accessibleLabel")}
    data-variant="ghost"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="sun"
    >
      <circle cx="12" cy="12" r="4"></circle>
      <path d="M12 2v2"></path>
      <path d="M12 20v2"></path>
      <path d="m4.93 4.93 1.41 1.41"></path>
      <path d="m17.66 17.66 1.41 1.41"></path>
      <path d="M2 12h2"></path>
      <path d="M20 12h2"></path>
      <path d="m6.34 17.66-1.41 1.41"></path>
      <path d="m19.07 4.93-1.41 1.41"></path>
    </svg>

    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="moon"
      ><path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z"> </path>
    </svg>

    <span class="sr-only">Toggle theme</span>
  </button>
</starlight-theme-black-select>

<style>
  svg {
    flex-shrink: 0;
    width: 1rem;
    height: 1rem;
    pointer-events: none;
  }

  :global([data-theme="light"]) svg.sun {
    display: none;
  }

  :global([data-theme="dark"]) svg.moon {
    display: none;
  }
</style>

{/* Inlined to avoid FOUC. Uses global scope from `ThemeProvider.astro` */}
<script is:inline>
  StarlightThemeProvider.updatePickers();
</script>

<script>
  type Theme = "auto" | "dark" | "light";

  /** Key in `localStorage` to store color theme preference at. */
  const storageKey = "starlight-theme";

  /** Get a typesafe theme string from any JS value (unknown values are coerced to `'auto'`). */
  function parseTheme(theme: unknown): Theme {
    return theme === "auto" || theme === "dark" || theme === "light"
      ? theme
      : "auto";
  }

  /** Load the user’s preference from `localStorage`. */
  function loadTheme(): Theme {
    return parseTheme(
      typeof localStorage !== "undefined" && localStorage.getItem(storageKey),
    );
  }

  /** Store the user’s preference in `localStorage`. */
  function storeTheme(theme: Theme): void {
    if (typeof localStorage !== "undefined") {
      localStorage.setItem(
        storageKey,
        theme === "light" || theme === "dark" ? theme : "",
      );
    }
  }

  /** Get the preferred system color scheme. */
  function getPreferredColorScheme(): Theme {
    return matchMedia("(prefers-color-scheme: light)").matches
      ? "light"
      : "dark";
  }

  /** Update select menu UI, document theme, and local storage state. */
  function onThemeChange(theme: Theme): void {
    // @ts-expect-error global?
    StarlightThemeProvider.updatePickers(theme);
    document.documentElement.dataset.theme =
      theme === "auto" ? getPreferredColorScheme() : theme;
    storeTheme(theme);
  }

  // React to changes in system color scheme.
  matchMedia(`(prefers-color-scheme: light)`).addEventListener("change", () => {
    if (loadTheme() === "auto") {
      onThemeChange("auto");
    }
  });

  customElements.define(
    "starlight-theme-black-select",
    class StarlightThemeBlackSelect extends HTMLElement {
      constructor() {
        super();
        onThemeChange(loadTheme());
        const button = this.querySelector("button");
        button?.addEventListener("click", () => {
          const theme = parseTheme(document.documentElement.dataset.theme);
          const newTheme =
            theme === "dark" ? "light" : theme === "light" ? "dark" : "auto";
          onThemeChange(newTheme);
          button?.setAttribute("aria-label", `${newTheme} theme`);
        });
      }
    },
  );
</script>
